-> Deploy Factory Contract

-> Deploy pools: factoryContract.createPool(Atoken, Btoken, feeAB)
-> Initialize the created pool: ABPool.initialize(initP_AB). The initial price is normal, like 5000 (AmountB = AmountA*Price).

-> Mint new position: mintManagerContract.mint([Atoken, Btoken, fee_BPV, lower_tick, upper_tick, AmountTokenA_Desired, AmountTokenB_Desired, AmountTokenA_Min, AmountTokenB_Min])
(AmountB = AmountA*Price)
#AmountTokenA_Min = 0
#AmountTokenB_Min = 0

-> Get position: mintManagerContract.getPosition([Atoken, Btoken, fee_BPV, user_address, lower_tick, upper_tick])

-> Get all positions: See how what NFT IDs the user owns and then see that info using the positions mapping:
	UniswapV3NFTManager.positions[tokenId] which returns 
                                                      struct TokenPosition {
                                                          address pool;
                                                          int24 lowerTick;
                                                          int24 upperTick;
                                                       }

-> Swap swapManagerContract.swapSingle([tokenIn, tokenOut, fee_BPV, amountIn, sqrtPriceLimitX96])
#sqrtPriceLimitX96 should be lower than the current one if TokenA is the input token (sqrtPriceLimitX96 = ABPool.slot0()[0])*0.9)
#sqrtPriceLimitX96 should be higher than the current one if TokenB is the input token (sqrtPriceLimitX96 = ABPool.slot0()[0])*1.1)

